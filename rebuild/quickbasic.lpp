
D			[0-9]
L			[a-zA-Z]



%x REMARK


%{
    #include <string>
    #include "quickbasic.h"
    #include "quickbasic.tab.h"
%}




%%



"step"		{  return((int)STEP); }
"print"		{  return((int)PRINT); }
"input"			{  return((int)INPUT); }
"let"			{  return((int)LET); }
"if"			{  return((int)IF); }
"else"			{  return((int)ELSE); }
"then"		{  return((int)THEN); }
"goto"		{  return((int)GOTO); }
"for"			{  return((int)FOR); }
"next"		{  return((int)NEXT); }
"to"			{  return((int)TO); }
"end"			{  return((int)END); }
"rem"			{ BEGIN(REMARK); return((int)REM); }
"cls"			{  return((int)CLS); }
"list"			{  return((int)LIST); }
"run"			{  return((int)RUN); }



<REMARK>"\n" { BEGIN(0); }
<REMARK>.* {  yylval.stringVal = yytext;
				return((int)REMARK_RECORD);  }
"#"			{ BEGIN(REMARK); return((int)REM); }

{L}+		{  yylval.stringVal = yytext;
    return((int)VAR); }

{L}+"$"	{    yylval.stringVal  = yytext;
    return((int)SVAR); }

{D}+		{  yylval.numVal = atoi(yytext);
    return((int)NUMBER); }

{D}*"."{D}+		{yylval.numVal = atof(yytext);
				return((int)REAL_NUMBER); }


\"(\\.|[^\\"])*\"	{ std::string temp = yytext; yylval.stringVal=temp.substr(1,temp.size()-2); return((int)STRING_LITERAL); }

"..."			{  return((int)ELLIPSIS); }
";"			{  return yytext[0]; }
","			{  return yytext[0]; }
"="			{  return yytext[0]; }
"("			{  return yytext[0]; }
")"			{  return yytext[0]; }


"-"			{  return yytext[0]; }
"+"			{  return yytext[0]; }
"*"			{  return yytext[0]; }
"/"			{  return yytext[0]; }
"%"			{  return yytext[0]; }
"<"			{  return yytext[0]; }
">"			{  return yytext[0]; }
"^"			{  return yytext[0]; }


[ \t\v\n\f]		{  }
.			{ /* ignore bad characters */ }

%%



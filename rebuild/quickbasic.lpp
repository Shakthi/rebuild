
D			[0-9]
L			[a-zA-Z]



%x REMARK


%{
    #include <string>
    #include "quickbasic.h"
    #include "quickbasic.tab.h"
    
    namespace {
    std::string trim(const std::string& str,
    const std::string& whitespace = " \t")
    {
        const auto strBegin = str.find_first_not_of(whitespace);
        if (strBegin == std::string::npos)
        return ""; // no content
        
        const auto strEnd = str.find_last_not_of(whitespace);
        const auto strRange = strEnd - strBegin + 1;
        
        return str.substr(strBegin, strRange);
    }
    }
%}




%%



"step"		{  return((int)STEP); }
"print"		{  return((int)PRINT); }
"input"			{  return((int)INPUT); }
"let"			{  return((int)LET); }
"if"			{  return((int)IF); }
"else"			{  return((int)ELSE); }
"then"		{  return((int)THEN); }
"goto"		{  return((int)GOTO); }
"for"			{  return((int)FOR); }
"next"		{  return((int)NEXT); }
"to"			{  return((int)TO); }
"end"			{  return((int)END); }
"rem"			{ BEGIN(REMARK); return((int)REM); }
"cls"			{  return((int)CLS); }
"list"			{  return((int)LIST); }
"run"			{  return((int)RUN); }
^[ ]*\.{L}+			{
    auto trimmed = trim(yytext);
    yylval = Value (trimmed.substr(1));
    return((int)CUSTOMCOMMAND);
}



<REMARK>"\n" { BEGIN(0); }
<REMARK>.* {  yylval = Value (yytext);
				return((int)REMARK_RECORD);  }
"#"			{ BEGIN(REMARK); return((int)REM); }

{L}+		{  yylval = Value (std::string(yytext));
    return((int)VAR); }

{L}+"$"	{    yylval = Value (std::string(yytext));
    return((int)SVAR); }

{D}+		{  yylval  = Value((float) atoi(yytext));
    return((int)NUMBER); }

{D}*"."{D}+		{yylval  = Value((float)atof(yytext));
				return((int)REAL_NUMBER); }


\"(\\.|[^\\"])*\"	{ std::string temp = yytext; yylval=Value(temp.substr(1,temp.size()-2)); return((int)STRING_LITERAL); }

"..."			{  return((int)ELLIPSIS); }
";"			{  return yytext[0]; }
","			{  return yytext[0]; }
"="			{  return yytext[0]; }
"("			{  return yytext[0]; }
")"			{  return yytext[0]; }


"-"			{  return yytext[0]; }
"+"			{  return yytext[0]; }
"*"			{  return yytext[0]; }
"/"			{  return yytext[0]; }
"%"			{  return yytext[0]; }
"<"			{  return yytext[0]; }
">"			{  return yytext[0]; }
"^"			{  return yytext[0]; }


[ \t\v\n\f]		{  }
.			{  return yytext[0]; }

%%



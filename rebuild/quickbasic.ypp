%{
    
#include<string>
#include<cstring>
#include<iostream>
#include<vector>
#include<map>


#include "Logger.hpp"
#include "quickbasic.h"
#include "AST.hpp"


Rlog trace("trace");




#define YYERROR_VERBOSE 1
#if YYBISON
int yylex();
void yyerror(Sentence ** sentenceOut,const char *);

#endif
%}

%start line

%parse-param { Sentence ** sentenceOut}

%token PRINT INPUT LET IF ELSE THEN GOTO FOR NEXT TO END  STEP PRINTE
ELLIPSIS REM CLS LIST RUN
%token <getStringVal()> VAR SVAR CUSTOMCOMMAND
%token <getStringVal()> STRING_LITERAL STATEMENT_RECORD REMARK_RECORD
%token <getNumVal()> NUMBER REAL_NUMBER

%type <expression> numexpr printItem printlist strexpr boolExression

%type <getStringVal()>  inputItem
%type <nodeVal> inputList forStataement nextStatement printStatement letStatement

%destructor { delete $$ ;} inputList forStataement nextStatement printStatement numexpr boolExression


%left '='  '>' '<'
%left '+' '-'
%left '*' '/'
%left '%'




%%

line    :   statement {
    *sentenceOut = $$.nodeVal;

}
|command {*sentenceOut = $$.nodeVal;}
;




statement   :
    printStatement
|printeStatement
|   letStatement
|   inputStatement
|   endstatement
|  ifstatment
|  forStataement
|  nextStatement
| remStatement
| gotoStament
;


command : listCommand | clearStatement |customCommand //It should be command
;

customCommand : CUSTOMCOMMAND  {
    auto var= new CustomCommand;
    var->name = $1;
    $$.nodeVal = var;
}
| CUSTOMCOMMAND commandarglist
;

commandarglist : commandarg
| commandarglist commandarg
;

commandarg : NUMBER | 

remStatement : REM REMARK_RECORD {  auto var= new RemarkStatement;  var->comments= $2; $$.nodeVal = var; }
;


gotoStament  : GOTO NUMBER {  std::cout<<"GOTO to be implemnted"<<std::endl; }
;

clearStatement : CLS { std::cout<<"CLS to be implemnted"<<std::endl;/*  DisplayConsole.Clear();  */}
;
listCommand : LIST {

$$.nodeVal = new ListCommand;
}
;

ifstatment : IF boolExression  {
    auto ifstment = new IfStatment;
    ifstment->expression = std::unique_ptr<RelationalExpression>(static_cast<RelationalExpression*>($2));
    $$=ifstment;

}
;

printStatement : PRINT printlist    {
    
    auto printnode = new PrintStatement();
    auto a  = static_cast<ExpressionList*>$2;
    printnode->printitems = std::move(a->list);
    $$=printnode;
    
    
    //PrintStatement//std::cout<<std::endl;  /* interpreter.PrintBuffer("\n"); */
}
;


printeStatement : PRINTE printlist    {
    
    auto printnode = new PrintElementStatement();
    auto a  = static_cast<ExpressionList*>$2;
    printnode->printitems = std::move(a->list);
    $$=printnode;
    
    
    //PrintStatement//std::cout<<std::endl;  /* interpreter.PrintBuffer("\n"); */
}
;

printlist   :   printItem { auto a = new ExpressionList(); a->list.push_back(std::unique_ptr<Expression>($1)); $$=a;}
|   printlist ';' printItem { auto a  = static_cast<ExpressionList*>$1; a->list.push_back(std::unique_ptr<Expression>($3)); $$=a; }
;

printItem   :   strexpr
|   numexpr
|   boolExression
;



letStatement     : LET VAR '=' numexpr  {

   
   auto l = new LetStatement;
   l->variablename= $2;
   l->rvalue =    std::unique_ptr<Expression>($4);

    $$=l;

   
   
}
| LET SVAR '=' strexpr {
    
    auto l = new LetStatement;
    l->variablename= $2;
    l->rvalue =    std::unique_ptr<Expression>($4);
    
    $$=l;
}


endstatement    : END { $$.nodeVal = new EndStatement(); }
;

inputStatement  : INPUT inputList { $$.nodeVal=$2;}
| INPUT STRING_LITERAL ';'  inputList
{
    auto readnode = static_cast<ReadStatement*>($4);
    readnode->prompt = $2;
    $$.nodeVal=readnode;
}
;

inputList : inputItem
{
    
    auto readnode = new ReadStatement();
    readnode->variableList.push_back($1);
    $$=readnode;

}
| inputList ';' inputItem
{

    auto readnode = static_cast<ReadStatement*>($1);
    readnode->variableList.push_back($3);
    $$ = $1;
}
;



inputItem   : VAR {auto val=$1;}
| SVAR{    auto val=$1;
    
};


forStataement 	: FOR VAR '=' numexpr TO numexpr  {
    
    std::string varName = $2;
    float step = 1.0;
    
    auto fornode = new ForStatment();
    
    fornode->forVar = varName;
    fornode->forBegin =  std::unique_ptr<Expression>($4);
    
    auto t=new TerminalExpression();
    t->sub = step;
    
    
    fornode->forStep =  std::unique_ptr<Expression>(t);
    fornode->forEnd = std::unique_ptr<Expression>($6);
    
    $$=fornode;


    
}
| FOR VAR '=' numexpr TO numexpr STEP numexpr
{
    std::string varName = $2;
    
    auto fornode = new ForStatment();
    
    fornode->forVar = varName;
    fornode->forBegin =  std::unique_ptr<Expression>($4);
    fornode->forStep =  std::unique_ptr<Expression>($8);
    fornode->forEnd = std::unique_ptr<Expression>($6);
    
    
    $$=fornode;
}
;



nextStatement   : NEXT  {
    
    auto node = new NextStatement();
    $$=node;
    
  
}
;







boolExression : numexpr '=' numexpr
{  $$ = new RelationalExpression($1 ,RelationalExpression::operatorType::equal, $3,Value::Evaluetype::floattype);
}
| numexpr '>' numexpr
{  $$ = new RelationalExpression($1 ,RelationalExpression::operatorType::greater, $3,Value::Evaluetype::floattype);
}

| numexpr '<' numexpr
{  $$ = new RelationalExpression($1 ,RelationalExpression::operatorType::less, $3,Value::Evaluetype::floattype);
}

| strexpr '=' strexpr
{  $$ = new RelationalExpression($1 ,RelationalExpression::operatorType::equal, $3,Value::Evaluetype::stringtype);
}

;




strexpr     : '(' strexpr ')'
{
    $$ = $2;
}
| strexpr '+' strexpr
{
    
    auto e=new ArithmeticExpression ;
    e->left = std::unique_ptr<Expression>($1);
    
    e->mOperator = ArithmeticExpression::operatorType::plus;
    
    e->right = std::unique_ptr<Expression>($3);
    e->valuetype = Value::Evaluetype::stringtype;


    $$=e;

    //trace<<$1<<"+"<<$3<<" = "<<$$<<std::endl;


    
}
| STRING_LITERAL {
    
    auto  t =new TerminalExpression;
    t->sub = $1;
    
    t->sub.valutype = Value::Evaluetype::stringtype;
    t->valuetype = Value::Evaluetype::stringtype;
    $$ = t;

}
| SVAR {
    GetExpression *g =new GetExpression;
    g->varName = $1;
    g->valuetype = Value::Evaluetype::stringtype;
    
    $$ = g;

}

;





numexpr    :   '(' numexpr ')'
{
    //$$ = $2;
    
    
    auto e=new UnaryExpression ;
    e->sub = std::unique_ptr<Expression>($2);
    e->valuetype = Value::Evaluetype::floattype;
    e->mOperator = UnaryExpression::operatorType::grouping;
    
    $$=e;
   // trace<<"("<<$2<<") ="<<$$<<std::endl;
   
   
   
}
|   numexpr '*' numexpr
{
    

    auto e=new ArithmeticExpression ;
    e->left = std::unique_ptr<Expression>($1);
    e->valuetype = Value::Evaluetype::floattype;
    e->mOperator = ArithmeticExpression::operatorType::multiply;
    
    e->right = std::unique_ptr<Expression>($3);

    //trace<<$1<<"*"<<$3<<"= "<<$$<<std::endl;
    $$= e;
}
|   numexpr '/' numexpr
{
    //$$ = $1 / $3;
    
    
    
    
    auto e=new ArithmeticExpression ;
    e->left = std::unique_ptr<Expression>($1);
    e->valuetype = Value::Evaluetype::floattype;
    e->mOperator = ArithmeticExpression::operatorType::devide;
    
    e->right = std::unique_ptr<Expression>($3);
    
    e->right = std::unique_ptr<Expression>($3);
    $$=e;
    
    //trace<<$1<<"/"<<$3<<"= "<<$$<<std::endl;

}
|   numexpr '%' numexpr
{
 //   $$ = $1 % $3;
}
|   numexpr '+' numexpr
{
   // $$ = $1 + $3;
   
   
   auto e=new ArithmeticExpression ;
   e->left = std::unique_ptr<Expression>($1);
   e->valuetype = Value::Evaluetype::floattype;
   e->mOperator = ArithmeticExpression::operatorType::plus;
   
   e->right = std::unique_ptr<Expression>($3);
   $$=e;

// trace<<$1<<"+"<<$3<<"= "<<$$<<std::endl;


}
|   numexpr '-' numexpr
{
    
    auto e=new ArithmeticExpression ;
    e->left = std::unique_ptr<Expression>($1);
    e->valuetype = Value::Evaluetype::floattype;
    e->mOperator = ArithmeticExpression::operatorType::minus;
    
    e->right = std::unique_ptr<Expression>($3);
   // $$ = $1 - $3;
   // trace<<$1<<"-"<<$3<<"=" <<$$<<std::endl;
   
   
    $$=e;
}

|NUMBER {
    auto  t =new TerminalExpression;
    t->sub = Value($1);
    t->valuetype = Value::Evaluetype::floattype;
    $$ = t;
}
|REAL_NUMBER {
    
    auto  t =new TerminalExpression;
    t->sub = $1;


    t->valuetype = Value::Evaluetype::floattype;
    
    $$ = t;
}
|VAR    {
    
    GetExpression *g =new GetExpression;
    g->varName = $1;
    g->valuetype = Value::Evaluetype::floattype;
   
   $$ = g;
}
;



%%
void yyerror( Sentence** statement, const char * error)
{
    
    *statement = new ErrorStatement(error);
    

}

extern "C" int yywrap()
{
    return 1;
}
